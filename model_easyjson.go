// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mpesa

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo(in *jlexer.Lexer, out *authResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "access_token":
			out.AccessToken = string(in.String())
		case "expires_in":
			out.ExpiresIn = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo(out *jwriter.Writer, in authResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"access_token\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccessToken))
	}
	{
		const prefix string = ",\"expires_in\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExpiresIn))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v authResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v authResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *authResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *authResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo(l, v)
}
func easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo1(in *jlexer.Lexer, out *TransactionStatusResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OriginatorConversationID":
			out.OriginatorConversationID = string(in.String())
		case "ConversationID":
			out.ConversationID = string(in.String())
		case "ResponseDescription":
			out.ResponseDescription = string(in.String())
		case "ResponseCode":
			out.ResponseCode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo1(out *jwriter.Writer, in TransactionStatusResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OriginatorConversationID != "" {
		const prefix string = ",\"OriginatorConversationID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OriginatorConversationID))
	}
	if in.ConversationID != "" {
		const prefix string = ",\"ConversationID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConversationID))
	}
	if in.ResponseDescription != "" {
		const prefix string = ",\"ResponseDescription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResponseDescription))
	}
	if in.ResponseCode != "" {
		const prefix string = ",\"ResponseCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResponseCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransactionStatusResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransactionStatusResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransactionStatusResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransactionStatusResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo1(l, v)
}
func easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo2(in *jlexer.Lexer, out *TransactionStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CommandID":
			out.CommandID = string(in.String())
		case "PartyA":
			out.PartyA = string(in.String())
		case "IdentifierType":
			out.IdentifierType = string(in.String())
		case "Remarks":
			out.Remarks = string(in.String())
		case "Initiator":
			out.Initiator = string(in.String())
		case "SecurityCredential":
			out.SecurityCredential = string(in.String())
		case "QueueTimeOutURL":
			out.QueueTimeOutURL = string(in.String())
		case "ResultURL":
			out.ResultURL = string(in.String())
		case "TransactionID":
			out.TransactionID = string(in.String())
		case "Occasion":
			out.Occasion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo2(out *jwriter.Writer, in TransactionStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CommandID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CommandID))
	}
	{
		const prefix string = ",\"PartyA\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PartyA))
	}
	{
		const prefix string = ",\"IdentifierType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IdentifierType))
	}
	{
		const prefix string = ",\"Remarks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Remarks))
	}
	{
		const prefix string = ",\"Initiator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Initiator))
	}
	{
		const prefix string = ",\"SecurityCredential\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SecurityCredential))
	}
	{
		const prefix string = ",\"QueueTimeOutURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.QueueTimeOutURL))
	}
	{
		const prefix string = ",\"ResultURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResultURL))
	}
	{
		const prefix string = ",\"TransactionID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TransactionID))
	}
	if in.Occasion != "" {
		const prefix string = ",\"Occasion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Occasion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransactionStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransactionStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransactionStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransactionStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo2(l, v)
}
func easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo3(in *jlexer.Lexer, out *ReversalResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Result":
			easyjsonC80ae7adDecode(in, &out.Result)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo3(out *jwriter.Writer, in ReversalResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC80ae7adEncode(out, in.Result)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReversalResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReversalResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReversalResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReversalResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo3(l, v)
}
func easyjsonC80ae7adDecode(in *jlexer.Lexer, out *struct {
	ResultType               int
	ResultCode               int
	ResultDesc               string
	OriginatorConversationID string
	ConversationID           string
	TransactionID            string
	ReferenceData            json.RawMessage
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ResultType":
			out.ResultType = int(in.Int())
		case "ResultCode":
			out.ResultCode = int(in.Int())
		case "ResultDesc":
			out.ResultDesc = string(in.String())
		case "OriginatorConversationID":
			out.OriginatorConversationID = string(in.String())
		case "ConversationID":
			out.ConversationID = string(in.String())
		case "TransactionID":
			out.TransactionID = string(in.String())
		case "ReferenceData":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ReferenceData).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncode(out *jwriter.Writer, in struct {
	ResultType               int
	ResultCode               int
	ResultDesc               string
	OriginatorConversationID string
	ConversationID           string
	TransactionID            string
	ReferenceData            json.RawMessage
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ResultType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ResultType))
	}
	{
		const prefix string = ",\"ResultCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ResultCode))
	}
	{
		const prefix string = ",\"ResultDesc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResultDesc))
	}
	{
		const prefix string = ",\"OriginatorConversationID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OriginatorConversationID))
	}
	{
		const prefix string = ",\"ConversationID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConversationID))
	}
	{
		const prefix string = ",\"TransactionID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TransactionID))
	}
	{
		const prefix string = ",\"ReferenceData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ReferenceData).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo4(in *jlexer.Lexer, out *Reversal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CommandID":
			out.CommandID = string(in.String())
		case "ReceiverParty":
			out.ReceiverParty = string(in.String())
		case "ReceiverIdentifierType":
			out.ReceiverIdentifierType = string(in.String())
		case "Remarks":
			out.Remarks = string(in.String())
		case "Initiator":
			out.Initiator = string(in.String())
		case "SecurityCredential":
			out.SecurityCredential = string(in.String())
		case "QueueTimeOutURL":
			out.QueueTimeOutURL = string(in.String())
		case "TransactionID":
			out.TransactionID = string(in.String())
		case "Occasion":
			out.Occasion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo4(out *jwriter.Writer, in Reversal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CommandID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CommandID))
	}
	{
		const prefix string = ",\"ReceiverParty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReceiverParty))
	}
	{
		const prefix string = ",\"ReceiverIdentifierType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReceiverIdentifierType))
	}
	{
		const prefix string = ",\"Remarks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Remarks))
	}
	{
		const prefix string = ",\"Initiator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Initiator))
	}
	{
		const prefix string = ",\"SecurityCredential\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SecurityCredential))
	}
	{
		const prefix string = ",\"QueueTimeOutURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.QueueTimeOutURL))
	}
	{
		const prefix string = ",\"TransactionID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TransactionID))
	}
	{
		const prefix string = ",\"Occasion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Occasion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reversal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reversal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reversal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reversal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo4(l, v)
}
func easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo5(in *jlexer.Lexer, out *PaymentResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MerchantRequestID":
			out.MerchantRequestID = string(in.String())
		case "CheckoutRequestID":
			out.CheckoutRequestID = string(in.String())
		case "ResponseDescription":
			out.ResponseDescription = string(in.String())
		case "ResponseCode":
			out.ResponseCode = string(in.String())
		case "CustomerMessage":
			out.CustomerMessage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo5(out *jwriter.Writer, in PaymentResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MerchantRequestID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MerchantRequestID))
	}
	{
		const prefix string = ",\"CheckoutRequestID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CheckoutRequestID))
	}
	{
		const prefix string = ",\"ResponseDescription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResponseDescription))
	}
	{
		const prefix string = ",\"ResponseCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResponseCode))
	}
	{
		const prefix string = ",\"CustomerMessage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CustomerMessage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo5(l, v)
}
func easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo6(in *jlexer.Lexer, out *PaymentCallback) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Body":
			easyjsonC80ae7adDecode1(in, &out.Body)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo6(out *jwriter.Writer, in PaymentCallback) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Body\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC80ae7adEncode1(out, in.Body)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentCallback) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentCallback) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentCallback) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentCallback) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo6(l, v)
}
func easyjsonC80ae7adDecode1(in *jlexer.Lexer, out *struct {
	STKCallback struct {
		MerchantRequestID string
		CheckoutRequestID string
		ResultCode        int
		ResultDesc        string
		CallbackMetadata  struct {
			Item []struct {
				Name  string
				Value json.RawMessage `json:",omitempty"`
			}
		} `json:",omitempty"`
	} `json:"stkCallback"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stkCallback":
			easyjsonC80ae7adDecode2(in, &out.STKCallback)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncode1(out *jwriter.Writer, in struct {
	STKCallback struct {
		MerchantRequestID string
		CheckoutRequestID string
		ResultCode        int
		ResultDesc        string
		CallbackMetadata  struct {
			Item []struct {
				Name  string
				Value json.RawMessage `json:",omitempty"`
			}
		} `json:",omitempty"`
	} `json:"stkCallback"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stkCallback\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC80ae7adEncode2(out, in.STKCallback)
	}
	out.RawByte('}')
}
func easyjsonC80ae7adDecode2(in *jlexer.Lexer, out *struct {
	MerchantRequestID string
	CheckoutRequestID string
	ResultCode        int
	ResultDesc        string
	CallbackMetadata  struct {
		Item []struct {
			Name  string
			Value json.RawMessage `json:",omitempty"`
		}
	} `json:",omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MerchantRequestID":
			out.MerchantRequestID = string(in.String())
		case "CheckoutRequestID":
			out.CheckoutRequestID = string(in.String())
		case "ResultCode":
			out.ResultCode = int(in.Int())
		case "ResultDesc":
			out.ResultDesc = string(in.String())
		case "CallbackMetadata":
			easyjsonC80ae7adDecode3(in, &out.CallbackMetadata)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncode2(out *jwriter.Writer, in struct {
	MerchantRequestID string
	CheckoutRequestID string
	ResultCode        int
	ResultDesc        string
	CallbackMetadata  struct {
		Item []struct {
			Name  string
			Value json.RawMessage `json:",omitempty"`
		}
	} `json:",omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MerchantRequestID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MerchantRequestID))
	}
	{
		const prefix string = ",\"CheckoutRequestID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CheckoutRequestID))
	}
	{
		const prefix string = ",\"ResultCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ResultCode))
	}
	{
		const prefix string = ",\"ResultDesc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResultDesc))
	}
	if true {
		const prefix string = ",\"CallbackMetadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC80ae7adEncode3(out, in.CallbackMetadata)
	}
	out.RawByte('}')
}
func easyjsonC80ae7adDecode3(in *jlexer.Lexer, out *struct {
	Item []struct {
		Name  string
		Value json.RawMessage `json:",omitempty"`
	}
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Item":
			if in.IsNull() {
				in.Skip()
				out.Item = nil
			} else {
				in.Delim('[')
				if out.Item == nil {
					if !in.IsDelim(']') {
						out.Item = make([]struct {
							Name  string
							Value json.RawMessage `json:",omitempty"`
						}, 0, 1)
					} else {
						out.Item = []struct {
							Name  string
							Value json.RawMessage `json:",omitempty"`
						}{}
					}
				} else {
					out.Item = (out.Item)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						Name  string
						Value json.RawMessage `json:",omitempty"`
					}
					easyjsonC80ae7adDecode4(in, &v1)
					out.Item = append(out.Item, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncode3(out *jwriter.Writer, in struct {
	Item []struct {
		Name  string
		Value json.RawMessage `json:",omitempty"`
	}
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Item\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Item == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Item {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjsonC80ae7adEncode4(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC80ae7adDecode4(in *jlexer.Lexer, out *struct {
	Name  string
	Value json.RawMessage `json:",omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Value":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Value).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncode4(out *jwriter.Writer, in struct {
	Name  string
	Value json.RawMessage `json:",omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Value) != 0 {
		const prefix string = ",\"Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Value).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo7(in *jlexer.Lexer, out *Payment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BusinessShortCode":
			out.BusinessShortCode = string(in.String())
		case "Password":
			out.Password = string(in.String())
		case "Timestamp":
			out.Timestamp = string(in.String())
		case "TransactionType":
			out.TransactionType = string(in.String())
		case "Amount":
			out.Amount = string(in.String())
		case "PartyA":
			out.PartyA = string(in.String())
		case "PartyB":
			out.PartyB = string(in.String())
		case "PhoneNumber":
			out.PhoneNumber = string(in.String())
		case "CallBackURL":
			out.CallBackURL = string(in.String())
		case "AccountReference":
			out.AccountReference = string(in.String())
		case "TransactionDesc":
			out.TransactionDesc = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo7(out *jwriter.Writer, in Payment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"BusinessShortCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BusinessShortCode))
	}
	{
		const prefix string = ",\"Password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"Timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Timestamp))
	}
	{
		const prefix string = ",\"TransactionType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TransactionType))
	}
	{
		const prefix string = ",\"Amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"PartyA\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PartyA))
	}
	{
		const prefix string = ",\"PartyB\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PartyB))
	}
	{
		const prefix string = ",\"PhoneNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PhoneNumber))
	}
	{
		const prefix string = ",\"CallBackURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CallBackURL))
	}
	{
		const prefix string = ",\"AccountReference\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AccountReference))
	}
	{
		const prefix string = ",\"TransactionDesc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TransactionDesc))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Payment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Payment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Payment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Payment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo7(l, v)
}
func easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo8(in *jlexer.Lexer, out *GenericResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OriginatorConversationID":
			out.OriginatorConversationID = string(in.String())
		case "ConversationID":
			out.ConversationID = string(in.String())
		case "ResponseDescription":
			out.ResponseDescription = string(in.String())
		case "ResponseCode":
			out.ResponseCode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo8(out *jwriter.Writer, in GenericResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OriginatorConversationID != "" {
		const prefix string = ",\"OriginatorConversationID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OriginatorConversationID))
	}
	if in.ConversationID != "" {
		const prefix string = ",\"ConversationID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConversationID))
	}
	if in.ResponseDescription != "" {
		const prefix string = ",\"ResponseDescription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResponseDescription))
	}
	if in.ResponseCode != "" {
		const prefix string = ",\"ResponseCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResponseCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GenericResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GenericResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GenericResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GenericResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo8(l, v)
}
func easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo9(in *jlexer.Lexer, out *C2BValidationResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TransactionType":
			out.TransactionType = string(in.String())
		case "TransID":
			out.TransID = string(in.String())
		case "TransTime":
			out.TransTime = string(in.String())
		case "TransAmount":
			out.TransAmount = string(in.String())
		case "BusinessShortCode":
			out.BusinessShortCode = string(in.String())
		case "BillRefNumber":
			out.BillRefNumber = string(in.String())
		case "InvoiceNumber":
			out.InvoiceNumber = string(in.String())
		case "OrgAccountBalance":
			out.OrgAccountBalance = string(in.String())
		case "ThirdPartyTransID":
			out.ThirdPartyTransID = string(in.String())
		case "MSISDN":
			out.MSISDN = string(in.String())
		case "FirstName":
			out.FirstName = string(in.String())
		case "MiddleName":
			out.MiddleName = string(in.String())
		case "LastName":
			out.LastName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo9(out *jwriter.Writer, in C2BValidationResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TransactionType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TransactionType))
	}
	{
		const prefix string = ",\"TransID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TransID))
	}
	{
		const prefix string = ",\"TransTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TransTime))
	}
	{
		const prefix string = ",\"TransAmount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TransAmount))
	}
	{
		const prefix string = ",\"BusinessShortCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BusinessShortCode))
	}
	{
		const prefix string = ",\"BillRefNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BillRefNumber))
	}
	{
		const prefix string = ",\"InvoiceNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InvoiceNumber))
	}
	{
		const prefix string = ",\"OrgAccountBalance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrgAccountBalance))
	}
	{
		const prefix string = ",\"ThirdPartyTransID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ThirdPartyTransID))
	}
	{
		const prefix string = ",\"MSISDN\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MSISDN))
	}
	{
		const prefix string = ",\"FirstName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"MiddleName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MiddleName))
	}
	{
		const prefix string = ",\"LastName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v C2BValidationResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v C2BValidationResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *C2BValidationResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *C2BValidationResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo9(l, v)
}
func easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo10(in *jlexer.Lexer, out *C2BResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OriginatorConversationID":
			out.OriginatorConversationID = string(in.String())
		case "ConversationID":
			out.ConversationID = string(in.String())
		case "ResponseDescription":
			out.ResponseDescription = string(in.String())
		case "ResponseCode":
			out.ResponseCode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo10(out *jwriter.Writer, in C2BResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OriginatorConversationID != "" {
		const prefix string = ",\"OriginatorConversationID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OriginatorConversationID))
	}
	if in.ConversationID != "" {
		const prefix string = ",\"ConversationID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConversationID))
	}
	if in.ResponseDescription != "" {
		const prefix string = ",\"ResponseDescription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResponseDescription))
	}
	if in.ResponseCode != "" {
		const prefix string = ",\"ResponseCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResponseCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v C2BResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v C2BResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *C2BResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *C2BResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo10(l, v)
}
func easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo11(in *jlexer.Lexer, out *C2BRegisterURLResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OriginatorConversationID":
			out.OriginatorConversationID = string(in.String())
		case "ConversationID":
			out.ConversationID = string(in.String())
		case "ResponseDescription":
			out.ResponseDescription = string(in.String())
		case "ResponseCode":
			out.ResponseCode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo11(out *jwriter.Writer, in C2BRegisterURLResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OriginatorConversationID != "" {
		const prefix string = ",\"OriginatorConversationID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OriginatorConversationID))
	}
	if in.ConversationID != "" {
		const prefix string = ",\"ConversationID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConversationID))
	}
	if in.ResponseDescription != "" {
		const prefix string = ",\"ResponseDescription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResponseDescription))
	}
	if in.ResponseCode != "" {
		const prefix string = ",\"ResponseCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResponseCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v C2BRegisterURLResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v C2BRegisterURLResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *C2BRegisterURLResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *C2BRegisterURLResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo11(l, v)
}
func easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo12(in *jlexer.Lexer, out *C2BRegisterURL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ShortCode":
			out.ShortCode = string(in.String())
		case "ResponseType":
			out.ResponseType = string(in.String())
		case "ConfirmationURL":
			out.ConfirmationURL = string(in.String())
		case "ValidationURL":
			out.ValidationURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo12(out *jwriter.Writer, in C2BRegisterURL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ShortCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ShortCode))
	}
	{
		const prefix string = ",\"ResponseType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResponseType))
	}
	{
		const prefix string = ",\"ConfirmationURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConfirmationURL))
	}
	{
		const prefix string = ",\"ValidationURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ValidationURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v C2BRegisterURL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v C2BRegisterURL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *C2BRegisterURL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *C2BRegisterURL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo12(l, v)
}
func easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo13(in *jlexer.Lexer, out *C2BConformationResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TransactionType":
			out.TransactionType = string(in.String())
		case "TransID":
			out.TransID = string(in.String())
		case "TransTime":
			out.TransTime = string(in.String())
		case "TransAmount":
			out.TransAmount = string(in.String())
		case "BusinessShortCode":
			out.BusinessShortCode = string(in.String())
		case "BillRefNumber":
			out.BillRefNumber = string(in.String())
		case "InvoiceNumber":
			out.InvoiceNumber = string(in.String())
		case "OrgAccountBalance":
			out.OrgAccountBalance = string(in.String())
		case "ThirdPartyTransID":
			out.ThirdPartyTransID = string(in.String())
		case "MSISDN":
			out.MSISDN = string(in.String())
		case "FirstName":
			out.FirstName = string(in.String())
		case "MiddleName":
			out.MiddleName = string(in.String())
		case "LastName":
			out.LastName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo13(out *jwriter.Writer, in C2BConformationResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TransactionType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TransactionType))
	}
	{
		const prefix string = ",\"TransID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TransID))
	}
	{
		const prefix string = ",\"TransTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TransTime))
	}
	{
		const prefix string = ",\"TransAmount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TransAmount))
	}
	{
		const prefix string = ",\"BusinessShortCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BusinessShortCode))
	}
	{
		const prefix string = ",\"BillRefNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BillRefNumber))
	}
	{
		const prefix string = ",\"InvoiceNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InvoiceNumber))
	}
	{
		const prefix string = ",\"OrgAccountBalance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrgAccountBalance))
	}
	{
		const prefix string = ",\"ThirdPartyTransID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ThirdPartyTransID))
	}
	{
		const prefix string = ",\"MSISDN\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MSISDN))
	}
	{
		const prefix string = ",\"FirstName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"MiddleName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MiddleName))
	}
	{
		const prefix string = ",\"LastName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v C2BConformationResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v C2BConformationResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *C2BConformationResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *C2BConformationResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo13(l, v)
}
func easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo14(in *jlexer.Lexer, out *C2B) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ShortCode":
			out.ShortCode = string(in.String())
		case "CommandID":
			out.CommandID = string(in.String())
		case "Amount":
			out.Amount = string(in.String())
		case "Msisdn":
			out.Msisdn = string(in.String())
		case "BillRefNumber":
			out.BillRefNumber = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo14(out *jwriter.Writer, in C2B) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ShortCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ShortCode))
	}
	{
		const prefix string = ",\"CommandID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CommandID))
	}
	{
		const prefix string = ",\"Amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"Msisdn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Msisdn))
	}
	if in.BillRefNumber != "" {
		const prefix string = ",\"BillRefNumber\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BillRefNumber))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v C2B) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v C2B) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *C2B) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *C2B) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo14(l, v)
}
func easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo15(in *jlexer.Lexer, out *B2CResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OriginatorConversationID":
			out.OriginatorConversationID = string(in.String())
		case "ConversationID":
			out.ConversationID = string(in.String())
		case "ResponseDescription":
			out.ResponseDescription = string(in.String())
		case "ResponseCode":
			out.ResponseCode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo15(out *jwriter.Writer, in B2CResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.OriginatorConversationID != "" {
		const prefix string = ",\"OriginatorConversationID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OriginatorConversationID))
	}
	if in.ConversationID != "" {
		const prefix string = ",\"ConversationID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConversationID))
	}
	if in.ResponseDescription != "" {
		const prefix string = ",\"ResponseDescription\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResponseDescription))
	}
	if in.ResponseCode != "" {
		const prefix string = ",\"ResponseCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResponseCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v B2CResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v B2CResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *B2CResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *B2CResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo15(l, v)
}
func easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo16(in *jlexer.Lexer, out *B2CCallback) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Result":
			easyjsonC80ae7adDecode5(in, &out.Result)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo16(out *jwriter.Writer, in B2CCallback) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC80ae7adEncode5(out, in.Result)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v B2CCallback) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v B2CCallback) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *B2CCallback) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *B2CCallback) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo16(l, v)
}
func easyjsonC80ae7adDecode5(in *jlexer.Lexer, out *struct {
	ResultType               int
	ResultCode               int
	ResultDesc               string
	OriginatorConversationID string
	ConversationID           string
	TransactionID            string
	ResultParameters         struct {
		ResultParameter []struct {
			Key   string
			Value json.RawMessage
		}
	}
	ReferenceData json.RawMessage
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ResultType":
			out.ResultType = int(in.Int())
		case "ResultCode":
			out.ResultCode = int(in.Int())
		case "ResultDesc":
			out.ResultDesc = string(in.String())
		case "OriginatorConversationID":
			out.OriginatorConversationID = string(in.String())
		case "ConversationID":
			out.ConversationID = string(in.String())
		case "TransactionID":
			out.TransactionID = string(in.String())
		case "ResultParameters":
			easyjsonC80ae7adDecode6(in, &out.ResultParameters)
		case "ReferenceData":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ReferenceData).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncode5(out *jwriter.Writer, in struct {
	ResultType               int
	ResultCode               int
	ResultDesc               string
	OriginatorConversationID string
	ConversationID           string
	TransactionID            string
	ResultParameters         struct {
		ResultParameter []struct {
			Key   string
			Value json.RawMessage
		}
	}
	ReferenceData json.RawMessage
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ResultType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ResultType))
	}
	{
		const prefix string = ",\"ResultCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ResultCode))
	}
	{
		const prefix string = ",\"ResultDesc\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResultDesc))
	}
	{
		const prefix string = ",\"OriginatorConversationID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OriginatorConversationID))
	}
	{
		const prefix string = ",\"ConversationID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ConversationID))
	}
	{
		const prefix string = ",\"TransactionID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TransactionID))
	}
	{
		const prefix string = ",\"ResultParameters\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC80ae7adEncode6(out, in.ResultParameters)
	}
	{
		const prefix string = ",\"ReferenceData\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ReferenceData).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonC80ae7adDecode6(in *jlexer.Lexer, out *struct {
	ResultParameter []struct {
		Key   string
		Value json.RawMessage
	}
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ResultParameter":
			if in.IsNull() {
				in.Skip()
				out.ResultParameter = nil
			} else {
				in.Delim('[')
				if out.ResultParameter == nil {
					if !in.IsDelim(']') {
						out.ResultParameter = make([]struct {
							Key   string
							Value json.RawMessage
						}, 0, 1)
					} else {
						out.ResultParameter = []struct {
							Key   string
							Value json.RawMessage
						}{}
					}
				} else {
					out.ResultParameter = (out.ResultParameter)[:0]
				}
				for !in.IsDelim(']') {
					var v4 struct {
						Key   string
						Value json.RawMessage
					}
					easyjsonC80ae7adDecode7(in, &v4)
					out.ResultParameter = append(out.ResultParameter, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncode6(out *jwriter.Writer, in struct {
	ResultParameter []struct {
		Key   string
		Value json.RawMessage
	}
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ResultParameter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ResultParameter == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.ResultParameter {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjsonC80ae7adEncode7(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC80ae7adDecode7(in *jlexer.Lexer, out *struct {
	Key   string
	Value json.RawMessage
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Key":
			out.Key = string(in.String())
		case "Value":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Value).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncode7(out *jwriter.Writer, in struct {
	Key   string
	Value json.RawMessage
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"Value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Value).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo17(in *jlexer.Lexer, out *B2C) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "InitiatorName":
			out.InitiatorName = string(in.String())
		case "SecurityCredential":
			out.SecurityCredential = string(in.String())
		case "CommandID":
			out.CommandID = string(in.String())
		case "Amount":
			out.Amount = string(in.String())
		case "PartyA":
			out.PartyA = string(in.String())
		case "PartyB":
			out.PartyB = string(in.String())
		case "Remarks":
			out.Remarks = string(in.String())
		case "QueueTimeOutURL":
			out.QueueTimeOutURL = string(in.String())
		case "ResultURL":
			out.ResultURL = string(in.String())
		case "Occasion":
			out.Occasion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo17(out *jwriter.Writer, in B2C) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"InitiatorName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.InitiatorName))
	}
	{
		const prefix string = ",\"SecurityCredential\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SecurityCredential))
	}
	{
		const prefix string = ",\"CommandID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CommandID))
	}
	{
		const prefix string = ",\"Amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Amount))
	}
	{
		const prefix string = ",\"PartyA\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PartyA))
	}
	{
		const prefix string = ",\"PartyB\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PartyB))
	}
	{
		const prefix string = ",\"Remarks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Remarks))
	}
	{
		const prefix string = ",\"QueueTimeOutURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.QueueTimeOutURL))
	}
	{
		const prefix string = ",\"ResultURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResultURL))
	}
	if in.Occasion != "" {
		const prefix string = ",\"Occasion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Occasion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v B2C) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v B2C) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *B2C) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *B2C) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo17(l, v)
}
func easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo18(in *jlexer.Lexer, out *APIError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "requestId":
			if in.IsNull() {
				in.Skip()
				out.RequestId = nil
			} else {
				if out.RequestId == nil {
					out.RequestId = new(string)
				}
				*out.RequestId = string(in.String())
			}
		case "errorCode":
			if in.IsNull() {
				in.Skip()
				out.ErrorCode = nil
			} else {
				if out.ErrorCode == nil {
					out.ErrorCode = new(string)
				}
				*out.ErrorCode = string(in.String())
			}
		case "errorMessage":
			if in.IsNull() {
				in.Skip()
				out.ErrorMessage = nil
			} else {
				if out.ErrorMessage == nil {
					out.ErrorMessage = new(string)
				}
				*out.ErrorMessage = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo18(out *jwriter.Writer, in APIError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"requestId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.RequestId == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.RequestId))
		}
	}
	{
		const prefix string = ",\"errorCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ErrorCode == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ErrorCode))
		}
	}
	{
		const prefix string = ",\"errorMessage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ErrorMessage == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ErrorMessage))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComDevimteamMpesaApiGo18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComDevimteamMpesaApiGo18(l, v)
}
